[{"categories":["html5","iOS"],"contents":" 原生 iOS 键盘收起对 h5 页面的影响 问题描述 iOS 开启 WebView 或者浏览器中嵌入 h5\n 如果当前 h5 页面底部有position:fixed，当 iOS 键盘弹出再落回的时候会造成页面底部大量留白。 如果是position:fixed弹窗，则当键盘收起时，弹窗位置会发生轻微偏移，造成弹窗上的点击失效。 甚至正常页面的点击也有这样的问题。  解决方案 归根结底，是 iOS 原生键盘收起时，页面整体没有正常回落，导致你看到的页面和实际的有稍许差距。这是 iOS11 以来的经典 bug。\n当键盘收起时做以下操作（一般是 input 框 blur 时候）：\n scrollIntoViewIfNeeded 在移动端兼容性非常好  1 2 3 4 5 6  const btn = document.querySelector(\u0026#34;.btn\u0026#34;); const test = document.querySelector(\u0026#34;.chunk\u0026#34;); btn.addEventListener(\u0026#34;click\u0026#34;, function() { test.scrollIntoViewIfNeeded(); // 控制页面滚动到当前dom可视的居中位置 });     采用 window.scroll 强制滚动到头部  1 2 3  setTimeout(() =\u0026gt; { window.scroll(0, 0); }, 100);    FastClick 对 textarea 等元素 focus 影响 问题描述 FastClick 是对老的手机系统版本 js click 事件延迟 300ms 执行问题做处理的 js 库。如今在 iOS 9.31 以上版本，可以通过简单的 meta 标签来回避这个问题。\n1  \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width\u0026#34; /\u0026gt;   然而为了适配老的机型，在项目中存在有时候就是累赘，比如会造成表单元素聚焦非常迟钝。\n解决方案  needsclick className 忽略  1 2  \u0026lt;div class=\u0026#34;item needsclick\u0026#34;\u0026gt;My El\u0026lt;/div\u0026gt; \u0026lt;!-- className of needsclick will ignored by fastclick --\u0026gt;    一种 hack 写法  1 2 3 4 5 6 7 8 9  \u0026lt;textarea autocomplete=\u0026#34;off\u0026#34; spellcheck=\u0026#34;false\u0026#34; autocapitalize=\u0026#34;off\u0026#34; autocorrect=\u0026#34;off\u0026#34; v-model.trim=\u0026#34;test\u0026#34; @blur=\u0026#34;e =\u0026gt; e.target.scrollIntoViewIfNeeded()\u0026#34; @click=\u0026#34;e =\u0026gt; e.target.focus()\u0026#34; \u0026gt;\u0026lt;/textarea\u0026gt;   iOS 键盘拼音问题 问题描述 iOS 键盘在打拼音的时候，默认 input 事件是不执行的，所以 vue 当中的v-model也是没有值的。\n解决方案 换成keyup事件\n 2019 再聊移动端 300ms 延迟及 fastClick 原理解析 [return]   ","date":1564099200,"permalink":"https://blog.cankiss.ml/post/web-developer/ios-webview-bug/","tags":["html5","iOS"],"title":"h5页面嵌套iOS中的坑点"},{"categories":["JavaScript"],"contents":" 前言 笔者最早在vue-cli3（vue 的工具链）中看到的这种前端代码的部署方式，并在生产环境做了部署，但是各种原因并没有发现什么优势。不过这是一个很酷的技术，笔者尝试很多种方式也未能自己实现类似的在 vue 框架下的现代打包方式。\n什么是现代打包方式  Deploying ES2015+ Code in Production Today\n尽管目前所有的前沿浏览器都能运行 ES2015+ 代码（译注：ES2015 及俗称的 ES6），自然也能够支持我刚刚列举的新特性，，但是为了兼容占有小比例的低版本浏览器用户，大部分的开发者仍然使用 polyfills 将代码编译成 ES5 语法。\n这种情况无疑糟透了，在理想的世界里，我们将无需输送不必要的代码！\n该文的中文翻译: https://jdc.jd.com/archives/4911\n Philip Walton  philipwalton.com/articles/...    简单的来讲，JavaScript新的版本语法特性、api 等无法和老版本浏览器兼容。但是开发者还想使用新的语法特性，怎么办呢？这个时候就该babeljs出场了。\n配合babeljs和各类的polyfill(实现某个 api 的 JS 包，用来补齐 JS 运行环境 api 缺失)，前端开发者可以书写任意版本的 JS 语法和 JS 相关 api 而不用考虑浏览器兼容性问题。\n然而随着浏览器版本的更新，老版本浏览器市场占比越来越低，而为了兼容那一小撮老版的浏览器，增加各类的polyfill代码包、babeljs转义代码，这也将不再合适。\n然而毕竟有老版本浏览器在使用不能放弃他们，所以面向现代模式的 JS 打包方式应运而生。\nbabel一词的来历  babel 一词来自《圣经·旧约》的记载巴别塔。当时的人们想要修筑直上云霄的巴别塔和上帝同在，被上帝惩罚所有人说不同的语言，最后大家因为语言不通各自离开，巴别塔也没有建成。这里 babeljs 借用这个寓意让不同的 js 语法都能转换成一种。\n\n现代模式的实现方式 这里摘抄 vue-cli3 实现方式：\n1  vue-cli-service build --modern   通过 --modern npm 参数构建两种 JS 包，一个现代版的包，面向支持 ES modules 的现代浏览器，另一个旧版的包，面向不支持的旧浏览器。\n 现代版的包会通过 \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; 在被支持的浏览器中加载；它们还会使用\u0026lt;link rel=\u0026quot;modulepreload\u0026quot;\u0026gt; 进行预加载。 旧版的包会通过 \u0026lt;script nomodule\u0026gt; 加载，并会被支持 ES modules 的浏览器忽略。 一个针对 Safari 10 中 \u0026lt;script nomodule\u0026gt; 的修复会被自动注入。  非常酷的实现方式，这样新旧浏览器分别会走两个包，新版浏览器加载更小的现代版 JS 语法包，老版浏览器则保持不变。 笔者经过打包的项目，新包比老包大概能缩减 100k 左右的大小，vue-cli3 文档指出可以缩减 16%。\n尝试 diy 现代打包工具（目前还没成熟的项目）  (babel-esm-plugin)[https://github.com/prateekbh/babel-esm-plugin]\n可以操作 babel 输出两种 js 代码\n (webpack-babel-multi-target-plugin)[https://github.com/DanielSchaffer/webpack-babel-multi-target-plugin]\n比较全面的实现方式，但是笔者在 vue 项目里打包 vendor 包巨大。不支持按需方式打包。\n  参考文档 (Serve modern code to modern browsers for faster page loads)[https://web.dev/serve-modern-code-to-modern-browsers]\n","date":1563321600,"permalink":"https://blog.cankiss.ml/post/web-developer/deploying-modern-code/","tags":["JavaScript","JavaScript","webpack"],"title":"面向现代浏览器部署代码"},{"categories":["html5","CSS3"],"contents":" 前言 收录一下 CSS 技巧吧\n单行多行截取文本 1 2 3 4 5 6  /* 单行截取 */ { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }  1 2 3 4 5 6 7 8  /* 多行移动端适用 */ { overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-box-orient: vertical; //属性规定框的子元素应该被水平或垂直排列 -webkit-line-clamp: 3; //这个属性适合WebKit浏览器或移动端（绝大部分是WebKit内核的）浏览器 }   操作伪元素（pseudo-element） 获取伪元素的属性值 1 2 3 4 5  //获取before伪元素的字号大小 var div = document.querySelector(\u0026#34;div\u0026#34;); var fontSize = window .getComputedStyle(div, \u0026#34;::before\u0026#34;) .getPropertyValue(\u0026#34;font-size\u0026#34;);    设置伪元素的属性值 1 2 3 4 5 6 7  \u0026lt;p data-foo=\u0026#34;hello\u0026#34;\u0026gt;world\u0026lt;/p\u0026gt; \u0026lt;style\u0026gt; p:before { content: attr(data-foo); } \u0026lt;/style\u0026gt; \u0026lt;!-- attr()支持多个连写，而且attr()内可以是DOM元素的任意属性 --\u0026gt;   参考文档  你所不知道的 css  ","date":1562803200,"permalink":"https://blog.cankiss.ml/post/web-developer/unknown-css/","tags":["html5","CSS3"],"title":"你所不知的CSS"},{"categories":["html5","CSS3"],"contents":" 盒模型  \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;标签被浏览器解析后会生成 div 元素并添加到 document tree 中，但 CSS 作用的对象并不是 document tree，而是根据 document tree 生成的 render tree，而盒子模型就是 render tree 的节点。\n 注意: 1. CSS 作用的是盒子(Box), 而不是元素(Element); 2. JS 无法直接操作盒子。 \n   cnblogs.com/fsjohnhuang/p/...    IE 盒模型（怪异盒模型） 1 2  width = content-width + padding-width + border-width height = content-height + padding-height + border-height   标准盒模型 1 2  width = content-width height = content-height   注意  默认大多数浏览器盒模型处理方式是标准盒模型。但是为了符合人们大多数的布局习惯，可以通过设置box-sizing:border-box转换成 IE 盒模型，这也是大多数 UI 框架样式的首选方式。\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  *, *:before, *:after { box-sizing: border-box; } /* or */ /* Vendor Prefixes \u0026amp; inherit */ html { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; } *, *:before, *:after { -webkit-box-sizing: inherit; -moz-box-sizing: inherit; box-sizing: inherit; }   BFC  那么 BFC 是什么呢？\nBFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。\n具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。\n通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。\n   10 分钟理解 BFC 原理    触发 BFC  根元素(html) 浮动元素（元素的 float 不是 none） 绝对定位元素（元素的 position 为 absolute 或 fixed） 行内块元素（元素的 display 为 inline-block） 表格单元格（元素的 display 为 table-cell，HTML 表格单元格默认为该值） 表格标题（元素的 display 为 table-caption，HTML 表格标题默认为该值） overflow 值不为 visible 的块元素 弹性元素（display 为 flex 或 inline-flex 元素的直接子元素） 网格元素（display 为 grid 或 inline-grid 元素的直接子元素）  以上内容来自1\n应用 双 div 外边距发生折叠 通过设置overflow: hidden触发 BFC，即可变成正常margin边距\n清除浮动 内部元素设置浮动脱离普通文档流造成高度坍陷，父元素设置overflow: hidden，即可正常包裹内部元素。\n两列自适应布局 1 2 3 4 5 6 7  \u0026lt;div style=\u0026#34;height: 100px;width: 100px;float: left;background: lightblue\u0026#34;\u0026gt; 我是一个左浮动的元素 \u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;width: 200px; height: 200px;background: #eee\u0026#34;\u0026gt; 我是一个没有设置浮动, 也没有触发 BFC 元素, width: 200px; height:200px; background: #eee; \u0026lt;/div\u0026gt;   此时左边元素会覆盖右边元素，通过设置右边元素overflow: hidden，就会正常两列排版。\n行内元素 常见的 span,img,button,input,label 等。更多行内元素请查看2 注意  1、行内元素除了 img 外均忽略宽高\n2、高度依靠font-size line-height, padding margin 只在水平方向实现，垂直方向无效\n3、display:line,line-block 会有空白间隙，通过设置父元素font-size:0解决\n\n应用 水平居中 当前元素设置inline-block，通过设置父容器 text-align:center 则可以使其水平居中。\n垂直居中 当前元素设置inline-block，其中一个子元素撑开父元素高度，然后设置其 vertical-align:middle，则其他行内元素在此父元素下垂直居中。\n常见的图标和字体上下对齐，设置 img vertical-align:middle\n参考文档  块格式化上下文 小科普：到底什么是 BFC、IFC、GFC 和 FFC 10 分钟理解 BFC 原理 IFC、BFC、GFC 与 FFC 知多少   https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context [return] https://developer.mozilla.org/zh-CN/docs/Web/HTML/Inline_elements [return]   ","date":1562716800,"permalink":"https://blog.cankiss.ml/post/web-developer/bfc-layout/","tags":["html5","CSS3"],"title":"什么是BFC"},{"categories":["html5","CSS3"],"contents":" 兼容性   效果展示  参考文章  表单数据校验 使用 HTML 和 CSS 技巧对表单进行约束验证  ","date":1561680000,"permalink":"https://blog.cankiss.ml/post/web-developer/input-css-vaild/","tags":["html5","CSS3"],"title":"利用html伪类设置表单效验样式"},{"categories":["golang"],"contents":"  golang 最受诟病的恐怕是没有成熟的包管理器，1.12 版本之前大都采用 vendor 的方式作为每个项目的包管理，造成巨大的资源重复浪费，类似 npm 的node_modules。go version \u0026gt;= 1.12 后内置的官方包管理器,不再需要配置 GOPATH 等环境变量。\nhttps://github.com/golang/go/wiki/Modules\n 基础使用 项目不需要在$GOPATH/src目录内\n1 2 3 4 5 6 7 8 9 10 11  go mod init your module name # will create a go.mod file go mod vendor # 依赖复制到vendor go mod tidy # 精简模块 go mod download # 下载资源到本地cache go get -u # 拉取最新模块版本 go run xxx.go # 下载资源生成go.sum文件 类型npm的package.lock go help mod # 查看更多命令   go mod 下载的包在 $GOPATH/pkg/mod\ngo get 设置代理 墙内小朋友的福音：https://goproxy.io/\nmacOS: 1 2 3 4 5 6  # 临时设置 # Enable the go modules feature export GO111MODULE=on # Set the GOPROXY environment variable export GOPROXY=https://goproxy.io  1 2 3 4 5 6 7 8 9  # 永久设置 vi ~/.bash_profile # add: export GO111MODULE=on # Set the GOPROXY environment variable export GOPROXY=https://goproxy.io # save source ~/.bash_profile   win: 1 2 3 4  # Enable the go modules feature $env:GO111MODULE=on # Set the GOPROXY environment variable $env:GOPROXY=https://goproxy.io   goland IDE 设置 勾选 go modules 选项并且设置代理。\nimport 引入方式 1 2 3  package main import \u0026#34;moduleName/folderName/fileName\u0026#34;   参考文章  go mod 使用 跳出 Go module 的泥潭  ","date":1560988800,"permalink":"https://blog.cankiss.ml/post/golang/gomod/","tags":["golang"],"title":"go mod使用"},{"categories":["mysql"],"contents":" 不要使用 brew 安装 mysql，至少笔者是没有成功过的，系统是最新的 10.14.5。\n 直接去官方地址下载，可以需要注册 Oracle 帐号\n客户端推荐使用：Navicat for mySQL，同时也有破解版仅供个人学习。\n","date":1560988800,"permalink":"https://blog.cankiss.ml/post/mysql/macos/","tags":["mysql"],"title":"macOS下mysql使用"},{"categories":["html5","JavaScript"],"contents":"  html5 中的 httpClient 目前只有两种：ajax、fetch。兼容性如下：\n   \najax  AJAX 即“Asynchronous JavaScript and XML”（异步的 JavaScript 与 XML 技术），指的是一套综合了多项技术的浏览器端网页开发技术。\n   zh.wikipedia.org/wiki/AJAX    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  // xhr level2 var xhr = new XMLHttpRequest(); xhr.open(\u0026#34;GET/POST/DELETE/...\u0026#34;, \u0026#34;/url\u0026#34;, \u0026#34;async: true | false\u0026#34;); xhr.send(); // 超时时间，0表示永不超时 xhr.timeout = 0; // 接受数据类型 xhr.responseType = \u0026#34;arrayBuffer | blob | json...\u0026#34;; // 设置请求头 xhr.setRequestHeader(\u0026#34;\u0026#34;, \u0026#34;\u0026#34;); // 请求成功 xhr.onload = e =\u0026gt; { console.log(\u0026#34;request success\u0026#34;); }; // 请求结束 xhr.onloadend = e =\u0026gt; { console.log(\u0026#34;request loadend\u0026#34;); }; // 请求出错 xhr.onerror = e =\u0026gt; { console.log(\u0026#34;request error\u0026#34;); }; // 请求超时 xhr.ontimeout = e =\u0026gt; { console.log(\u0026#34;request timeout\u0026#34;); }; // 监听进度 xhr.addEventListener( \u0026#34;progress\u0026#34;, function(evt) { if (evt.lengthComputable) { var percentComplete = evt.loaded / evt.total; } }, false );   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  \u0026lt;!-- post method requeset by xhr --\u0026gt; \u0026lt;!-- application/x-www-form-urlencoded --\u0026gt; \u0026lt;form id=\u0026#39;test-form\u0026#39;\u0026gt; Input1: \u0026lt;input name=\u0026#39;input1\u0026#39;\u0026gt;\u0026lt;br\u0026gt; Input2: \u0026lt;input name=\u0026#39;input2\u0026#39;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#39;submit\u0026#39;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt;var testForm = document.getElementById(\u0026#39;test-form\u0026#39;); testForm.onsubmit = function(event) { event.preventDefault(); var request = new XMLHttpRequest(); // POST to httpbin which returns the POST data as JSON request.open(\u0026#39;POST\u0026#39;, \u0026#39;URL\u0026#39;, /* async = */ false); var formData = new FormData(document.getElementById(\u0026#39;test-form\u0026#39;)); request.send(formData); console.log(request.response); }   原生 xhr 用起来不方便，常见的封装使用：\njquery ajax 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  /* * default contentType : application/x-www-form-urlencoded;charset=utf-8 * submit data by json format */ $.ajax({ url:url, type:\u0026#34;POST\u0026#34;, contentType: \u0026#34;application/json; charset=utf-8\u0026#34; data:{a:\u0026#34;1\u0026#34;}, success: function(){ ... } }) /* * formData 上传文件 * submit data by multipart/form-data */ var fd = new FormData(); fd.append(\u0026#39;file\u0026#39;, input.files[0]); $.ajax({ url:url, type:\u0026#34;POST\u0026#34;, data: fd, processData: false, contentType: false, success: function(){ ... } }) /* * 跨域带cookie */ $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true } });    axios 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  import axios from \u0026#34;axios\u0026#34;; import qs from \u0026#34;qs\u0026#34;; // 序列化和反序列化参数  // 创建实例级别的请求 const instance = axios.create({ baseURL: process.env.VUE_APP_API, timeout: 0, withCredentials: true // 跨域带cookie }); instance.interceptors.request.use( conf =\u0026gt; { return Object.assign(conf, { headers: { aaa: \u0026#34;111\u0026#34; } }); }, err =\u0026gt; Promise.reject(err) ); instance.interceptors.response.use( res =\u0026gt; { if (res.data.code === 200) { return Promise.resolve(res.data); } else { return Promise.reject(res); } }, err =\u0026gt; Promise.reject(err) ); // application/json instance.post(\u0026#34;url\u0026#34;, { a: \u0026#34;111\u0026#34; }); // application/x-www-form-urlencoded instance.post(\u0026#34;url\u0026#34;, qs.stringify({ a: \u0026#34;111\u0026#34; })); // multipart/form-data var fd = new FormData(); fd.append(\u0026#34;file\u0026#34;, input.files[0]); instance.post(\u0026#34;url\u0026#34;, fd); // get请求 url参数拼接 instance.get(\u0026#34;url\u0026#34;, { params: { a: \u0026#34;111\u0026#34; } });    这里推荐使用qs库反序列化（解析）和序列化数据，因为浏览器端的URLSearchParams兼容性不佳： \nfetch 可谓下一代的 xhr 代替品，自带 Promise 封装。\n1 2 3 4 5  fetch(\u0026#34;url\u0026#34;) .then(response =\u0026gt; response.json()) .then(function(res) { console.log(res); });    更多请查看：https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\n","date":1560902400,"permalink":"https://blog.cankiss.ml/post/web-developer/httpclient/","tags":["html5","JavaScript"],"title":"html5中的httpClient"},{"categories":["JavaScript"],"contents":"  在 JavaScript 中, Number 是一种 定义为 64 位双精度浮点型（double-precision 64-bit floating point format） (IEEE 754)的数字数据类型。\n   developer.mozilla.org/zh-CN/...    64 位存储数值，其中 0 到 51 存储数字（片段），52 到 62 存储指数，63 位存储符号：\n其中 IEEE 754 规定，有效数字第一位默认总是 1，不在 64 位浮点数之中，有效数字都是1.xxxxxx....xxx形式，小数点后面数最长 52 位。（其实是：科学记数法的二进制表示形式）\n最大最小整数的取值范围 [-9007199254740991,9007199254740991]\n1 2 3 4  Math.pow(2, 53) - 1 === Number.MAX_SAFE_INTEGER //es6+ // 9007199254740991 -(Math.pow(2, 53) - 1)) === Number.MIN_SAFE_INTEGER //es6+ // -9007199254740991    js 中的整数超过这两个值的任意计算都将失去精度。任意的 js 操作都不会正常显示，例如后端传回超过这两个值的 id 数字末尾都被截取以 0 代替。\n解决方案：\n 转换成字符串 Long.js  0.1+0.2 问题 因为二进制小数位只有 52 位，后面都将被截断（零舍一入），所以相加必然会出现精度丢失问题。\n解决方案：\n math.js bignumber.js  简单实用的高精度计算：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72  //加 function add(a, b) { var c, d, e; try { c = a.toString().split(\u0026#34;.\u0026#34;)[1].length; } catch (f) { c = 0; } try { d = b.toString().split(\u0026#34;.\u0026#34;)[1].length; } catch (f) { d = 0; } return (e = Math.pow(10, Math.max(c, d))), (mul(a, e) + mul(b, e)) / e; } // 减 function sub(a, b) { var c, d, e; try { c = a.toString().split(\u0026#34;.\u0026#34;)[1].length; } catch (f) { c = 0; } try { d = b.toString().split(\u0026#34;.\u0026#34;)[1].length; } catch (f) { d = 0; } return (e = Math.pow(10, Math.max(c, d))), (mul(a, e) - mul(b, e)) / e; } //乘 function mul(a, b) { var c = 0, d = a.toString(), e = b.toString(); try { c += d.split(\u0026#34;.\u0026#34;)[1].length; } catch (f) {} try { c += e.split(\u0026#34;.\u0026#34;)[1].length; } catch (f) {} return ( (Number(d.replace(\u0026#34;.\u0026#34;, \u0026#34;\u0026#34;)) * Number(e.replace(\u0026#34;.\u0026#34;, \u0026#34;\u0026#34;))) / Math.pow(10, c) ); } //除 function div(a, b) { var c, d, e = 0, f = 0; try { e = a.toString().split(\u0026#34;.\u0026#34;)[1].length; } catch (g) {} try { f = b.toString().split(\u0026#34;.\u0026#34;)[1].length; } catch (g) {} return ( (c = Number(a.toString().replace(\u0026#34;.\u0026#34;, \u0026#34;\u0026#34;))), (d = Number(b.toString().replace(\u0026#34;.\u0026#34;, \u0026#34;\u0026#34;))), mul(c / d, Math.pow(10, f - e)) ); } //四舍五入 function round(num, ratio) { var base = Math.pow(10, ratio); return div(Math.round(mul(num, base)), base); }    toFixed 四舍五入问题 1 2  (1.045).toFixed(2); // \u0026#34;1.04\u0026#34; (1.65).toFixed(1); // \u0026#34;1.6\u0026#34;    解决方案：\nnumber-precision\n1 2 3 4 5 6 7  /** * 四舍五入 */ function round(num, ratio) { var base = Math.pow(10, ratio); return div(Math.round(mul(num, base)), base); }   ","date":1560729600,"permalink":"https://blog.cankiss.ml/post/web-developer/numberinjs/","tags":["JavaScript"],"title":"谈谈JavaScript中的Number"},{"categories":["society","politics"],"contents":"  备胎是准备了，但这备胎能不能用，好不好用，就要另说了。现在硬软件都是一个复杂系统，开发不是闷在黑屋，闭门造车就能折腾出来的。产品开发要经过长期的试错。首先你得需要一个环境，就是我们常说的生态系统。有上下游产品支持，有成千成万的用户。否则你的产品都是 Bug，没有用户会有耐心花钱陪你玩。\n反正中国人工便宜，搞个人海战术，广泛撒网，没准就捞着一条大鱼了\n 编程随想  每周转载：关于美国封杀华为（网文8篇）    ccp 在国内土地上以来，无论战争还是科技生产，从来都是人海战术，这就是对个人人权的藐视。就拿华为例子来说，当今的操作系统是需要广大用户和开发人员长期磨合造就出大家都用的惯的系统，这就是生态的重要性，而不是一蹴而就的制作出来。软硬件环节依赖世界各大厂商供应，不再是几个集团或者国家能完成的。\n华为的成功在我看来就两点：\n 国家军工背景支撑 性价比超高的产品方案  不要说华为有多少专利，技术。大部分也是靠买、偷获得的1.\n中国人思想还大都停留在大一统的环境内，唯我独尊天朝上国的荒诞思想还在蔓延。当今的时代，是合作的时代，不是闭门造车的时代。所以我们的应该是开放怀抱，运用我们独有的能力参与世界发展的一环。回想过去 40 年所谓开放国门的改革，也只是拿我们的廉价人口劳动力和世界交换，为其他国家提供便宜的商品。边边角角，投机钻营，倒买倒卖，山寨模仿等倒是很拿手，真正拿出手的硬货少之又少。\n如今来到历史节点，改变国人命运时刻来了！\n开放怀抱融入世界，不再有所谓的仇视和焦虑。遵守规则，尊重人权，保障每个人权利。人人都能发光发热，人人都可以拿出自身的优势。\n https://cn.wsj.com/articles/华为崛起之路伴随着剽窃与不正当竞争指控-11558950613 [return]   ","date":1560297600,"permalink":"https://blog.cankiss.ml/post/society/kill-huawei/","tags":["society","politics"],"title":"About America Kill Huawei"},{"categories":["html5"],"contents":" 探究 web 移动端适配，到底是 rem 还是 px？ 这个问题也困扰笔者很多年，最开始一味地使用 rem，但是到现在觉得 rem 不再合适。\n 为什么有 rem 来实现适应的方案，因为当年 viewport 在低版本安卓设备上还有兼容问题，而 vw，vh 还没能跑遍所有浏览器，所以 flexible 方案用 rem 来模拟 vmin 来实现在不同设备等比缩放的“一竹竿”方案\n为什么说等比缩放是一竹竿，你想想在 ipad 这么大的设备跟和 iphone5 这么小的设备用同一套设计图，你就知道问题所在\n逻辑像素是用来调和不同设备，不同 dpr，不同屏幕，不同分辨率，不同观看距离之间的如何解决显示问题的方案\n要清楚，是调和，不是解决，解决仍需要人去解决，因为不同设备，在同样观赏距离看到的内容多少肯定是不一样的\n 知乎-猫5号  zhihu.com/question/313971223    px 适配 首先设置 meta 标签\n1 2  \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;!-- ios10+ 之后禁止缩放meta标签已经控制不了 --\u0026gt;    都 9102 了\n都不知道 px 是 viewport 像素，\n而 viewport 像素又是什么，其实是浏览器内部对逻辑像素进行再处理的结果，简单来理解就是调整逻辑像素的缩放来达到适应设备的一个中间层\n那么 viewport width=device-width 是什么意思，其实就是让 viewport 的尺寸等于逻辑像素的尺寸\n逻辑像素（device point），是为了调和距离不一样导致的差异，将所有设备根据距离，透视缩放到一个相等水平的观看距离之后得到的尺寸，是一个抽象的概念\n 知乎-猫5号  zhihu.com/question/313971223     为了在移动端让页面获得更好的显示效果，我们必须让布局视口、视觉视口都尽可能等于理想视口。\ndevice-width就等于理想视口的宽度，所以设置 width=device-width就相当于让布局视口等于理想视口。\n由于 initial-scale=理想视口宽度/视觉视口宽度，所以我们设置 initial-scale=1;就相当于让视觉视口等于理想视口。\n这时，1 个 CSS 像素就等于 1 个设备独立像素，而且我们也是基于理想视口来进行布局的，所以呈现出来的页面布局在各种设备上都能大致相似。\n   mp.weixin.qq.com/s/...    上面引用其他人的解释，这样我们就可以按照 iPhone6（宽 375px）布局了。\npx 布局总结几点：\n banner 图这些的，用 vw 做缩放，在不同机型上合理展示。 多用 flex 布局，加上浏览器厂商前缀兼容性已经近乎 100%。 多用 padding 布局，居中、间隙都可以使用 padding。 多用高度，少设置宽度。    px 布局在iPhone6p下的截图      rem 布局在iPhone6p下的截图     从截图可以看出，在同样的 iPhone6p（宽 414px）机型上，rem 布局明显放大了。因为 rem 是以 iPhone6 作为基础宽度布局，在不同的机型放大缩小来呈现一致的布局。\n这就回到一个问题上来了，那就是：大屏手机是为了一屏看到更多还是看的更大？我觉得大部分人不是去买老人机，大屏应该是看的更多，阅读效率更高！\n题外话  写到这里，突然想起来 iOS 同事告诉我他们的布局方式是相对于屏幕边距的精确 pt 布局，没有缩放可以简单适配到 iPad。这和我这个 px 布局如出一辙。又感叹到 iOS 不愧是移动端之王！（iOS 在业界各类的解决方早已做到了最好，如虚拟列表等。）\n\n自适应和响应式 这是两种布局方式，自适应是一种简单适配不同机型的解决方案，比如 rem，px 流式布局等。而配合媒体查询，在屏幕尺寸差距很大的设备上实现多种布局样式，就是所谓的响应式布局方案，列如经典的bootstrap等。\n常见屏幕的媒体查询，更多请查看。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  @media (max-width: 320px) { /* iPhone4、iPhone5、iPhoneSE */ } @media (max-width: 375px) { /* iPhone6、iPhone7、iPhoneX */ } @media (max-width: 414px) { /* iPhone6p、iPhone7p */ } @media (min-device-width: 768px) { /* iPad */ }   1px 问题 众所周知在 dpr\u0026gt;=2 机型 1px border 线并不是真正的 1px 会加粗。常见的解决方案：\npostcss-write-svg postcss 插件postcss-write-svg绘制 1px svg border-image。\n配合 webpack、parcel 等构建工具在根目录创建.postcssrc.js文件：\n1 2 3 4 5  module.exports = { plugins: { \u0026#34;postcss-write-svg\u0026#34;: {} } };    css 变量引入，webpack 全局引入需要style-resources-loader插件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  @svg border { width: 4px; height: 4px; @rect { fill: transparent; width: 100%; height: 100%; stroke-width: 25%; stroke: var(--color, black); } } /* 1px border */ .border { width: 300px; height: 300px; border: 1px solid; border-image: svg(border param(--color black)) 1 stretch; } /* 1px border left */ .border-left { width: 300px; height: 300px; border: 0; border-left: 1px solid; border-image: svg(border param(--color yellow)) 1 stretch; }   缺点：不能实现圆角\nhtml 伪类实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  .circle { width: 300px; height: 300px; border: 0; position: relative; } .circle::after { content: \u0026#34;\u0026#34;; position: absolute; width: 200%; height: 200%; border: 1px solid black; border-radius: 20px; transform-origin: 0 0; transform: scale(0.5); } .fake-border-left { width: 300px; height: 300px; position: relative; border: 0; } .fake-border-left::after { content: \u0026#34;\u0026#34;; position: absolute; width: 200%; height: 200%; border-right: 1px solid black; transform-origin: 0 0; transform: scale(0.5); }   特点：可以兼容圆角，简单实用，代码量多。\niOS8+ 独有 0.5px 只有 iOS 平台有 0.5px，其他平台均不能正常显示，不推荐\n效果如下： \n","date":1559260800,"permalink":"https://blog.cankiss.ml/post/web-developer/mobile-layout/","tags":["html5"],"title":"移动端适配"},{"categories":["Linux","Raspberry-Pi"],"contents":"   Raspberry Pi 3 Model B+ is the latest product in the Raspberry Pi 3 range\n Broadcom BCM2837B0, Cortex-A53 (ARMv8) 64-bit SoC @ 1.4GHz 1GB LPDDR2 SDRAM 2.4GHz and 5GHz IEEE 802.11.b/g/n/ac wireless LAN, Bluetooth 4.2, BLE Gigabit Ethernet over USB 2.0 (maximum throughput 300 Mbps) \n   see more    下载系统 官方系统 https://www.raspberrypi.org/downloads/raspbian/\n分为：桌面版、无桌面版\ncentos 系统 http://mirror.centos.org/altarch/7/isos/armhfp/\n用 Win32DiskImager 烧录到 SD 卡中\n系统烧录 Windows 推荐使用Win32DiskImager\nMacOS 1 2 3 4 5 6 7 8 9 10  df -h # 查看sd卡设备文件 # 假设 /dev/disk3 sudo diskutil unmount /dev/disk3s1 # 卸载 sudo dd bs=1m if=2018-11-13-raspbian-stretch.img of=/dev/rdisk3 conv=sync # 烧录 # if dd: bs: illegal numeric value change the block size bs=1m to bs=1M sudo diskutil eject /dev/rdisk3 # 重新挂载   headless(无显示器鼠标) 系统设置 开启 SSH  在 SD 卡分区里面创建一个名为 ssh 空文件即可\n默认用户名 pi，密码是 raspberry\n 开机连接 WiFi  用户可以在未启动树莓派的状态下单独修改 /boot/wpa_supplicant.conf 文件配置 WiFi 的 SSID 和密码，这样树莓派启动后会自行读取 wpa_supplicant.conf 配置文件连接 WiFi 设备。\n   shumeipai.nxez.com/2017/09/13/...    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  country=CN ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\u0026#34;WiFi-A\u0026#34; # wifi name psk=\u0026#34;12345678\u0026#34; # wifi pwd key_mgmt=WPA-PSK # 加密方式 priority=1 # 连接优先级，数字越大优先级越高 连接隐藏WiFi时需要指定该值为1 } # no pwd network={ ssid=\u0026#34;你的无线网络名称（ssid）\u0026#34; key_mgmt=NONE } # WEP 加密方式 network={ ssid=\u0026#34;你的无线网络名称（ssid）\u0026#34; key_mgmt=NONE wep_key0=\u0026#34;你的wifi密码\u0026#34; } # WPA/WPA2 加密方式 network={ ssid=\u0026#34;你的无线网络名称（ssid）\u0026#34; key_mgmt=WPA-PSK psk=\u0026#34;你的wifi密码\u0026#34; }   注意  如果树莓派通过 WiFi 连接进入路由器（DHCP 协议），并通过动态的 ip 地址调试 SSH 通道，那么建议在当前路由通过树莓派的 Mac 地址绑定一个静态 ip 这样更方便调试。\n\nSSH 环境下调试 sudo raspi-config 官方 raspbian 系统提供的简单的图形配置界面，建议配置修改 pi 用户密码、中文字库(ZH-CN UTF-8)、时区(Asia/Shanghai)、高级设置里面扩展文件系统空间等。\n切换国内软件源 清华大学开源镜像站  https://mirrors.tuna.tsinghua.edu.cn/\nhttps://mirrors.tuna.tsinghua.edu.cn/help/raspbian/\n\n1 2 3 4 5 6 7  sudo -s echo -e \u0026#34;deb https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contrib \\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contrib\u0026#34; \u0026gt; /etc/apt/sources.list echo -e \u0026#34;deb https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ stretch main\u0026#34; \u0026gt; /etc/apt/sources.list.d/raspi.list exit sudo apt update \u0026amp;\u0026amp; apt -y upgrade # sudo apt-get dist-upgrade ; sudo rpi-update # 更新软件\u0026amp;内核   安装 Screen 1 2  sudo apt-get install -y screen screen -S 终端名    常用的 screen 命令\n    命令 说明     screen -S 终端名 新建一个新的后台虚拟终端   screen -ls 查看已创建的后台虚拟终端   screen -r 终端名 进入该终端    ","date":1558051200,"permalink":"https://blog.cankiss.ml/post/raspberry-pi/3bplus/","tags":["Linux","Raspberry-Pi"],"title":"折腾树莓派3B+"},{"categories":["Linux","Raspberry-Pi"],"contents":" Debain 安装与卸载\n1 2 3  sudo apt-get install -y xxx sudo apt-get remove xxx sudo apt-get autoremove xxx # 慎用!   pip3 安装\n1 2  curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py sudo python3 get-pip.py   pip清华镜像使用  临时使用\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package 设为默认\n升级 pip 到最新的版本 (\u0026gt;=10.0.0) 后进行配置：\npip install pip -U pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n\n网易云音乐 Linux 版本\n1 2 3 4  $ git clone https://github.com/darknessomi/musicbox.git \u0026amp;\u0026amp; cd musicbox $ ## or (sudo) pip(3) install NetEase-MusicBox $ python(3) setup.py install $ (sudo) apt-get install mpg123   树莓派连接蓝牙音箱 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  ## 查看蓝牙状态 systemctl status bluetooth ## 添加蓝牙组 sudo usermod -G bluetooth -a pi sudo reboot #安装其他lib sudo apt-get install pi-bluetooth bluez bluez-firmware blueman -y #安装pulseaudio sudo apt-get install pulseaudio-module-bluetooth -y #修改pulseaudio的空闲退出时间 #sudo nano /etc/pulse/daemon.conf #设置 #exit-idle-time = -1 #开户pulseaudio pulseaudio --start bluetoothctl power on agent on default-agent scan on pair XX:XX:XX:XX:XX:XX trust XX:XX:XX:XX:XX:XX connect XX:XX:XX:XX:XX:XX exit #显示可用发音设备 pacmd list-sinks #设置默认发音设备 pacmd set-default-sink bluez_sink.XX:XX:XX:XX:XX:XX #测试 wget http://youness.net/wp-content/uploads/2016/08/h2g2.ogg paplay h2g2.ogg   表示连接一次蓝牙好难，不好玩！\n","date":1558051200,"permalink":"https://blog.cankiss.ml/post/raspberry-pi/python3/","tags":["Linux","Raspberry-Pi"],"title":"树莓派3B+链接蓝牙音箱"},{"categories":["breakwall"],"contents":"  v2ray has lots of tools to help you break firewall!\n   v2ray.com    shadowsocks + v2ray + ws + tls:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  { \u0026#34;log\u0026#34;: { \u0026#34;access\u0026#34;: \u0026#34;/var/log/v2ray/access.log\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;/var/log/v2ray/error.log\u0026#34;, \u0026#34;loglevel\u0026#34;: \u0026#34;warning\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 10000, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;uuid\u0026#34;, \u0026#34;alterId\u0026#34;: 99 } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/ray\u0026#34; } } }, { \u0026#34;port\u0026#34;: 1024, \u0026#34;protocol\u0026#34;: \u0026#34;shadowsocks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;method\u0026#34;: \u0026#34;aes-256-gcm\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;pwd\u0026#34; } } ], \u0026#34;outbound\u0026#34;: { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} } }   You can use caddy or nginx relay the websocket steam :\n1 2 3 4 5 6 7 8 9 10 11 12  $domain:443 { root /var/www gzip index index.html tls $certPath $keyPath header / -Server header / Strict-Transport-Security \u0026#34;max-age=31536000;\u0026#34; proxy /ray localhost:10000 { websocket header_upstream -Origin } }  1 2 3 4 5 6 7 8 9 10 11 12 13 14  server { listen 443 ssl http2; ... ... add_header Strict-Transport-Security \u0026#34;max-age=31536000\u0026#34;; location /ray { proxy_redirect off; proxy_pass http://127.0.0.1:10000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header Host $http_host; } }   You can use the cert to achieve tls.\n","date":1557187200,"permalink":"https://blog.cankiss.ml/post/breakwall/v2ray/","tags":["breakwall"],"title":"v2ray recommend server config"},{"categories":["Linux"],"contents":"  acme.sh 实现了 acme 协议，默认从 let\u0026rsquo;s encrypt 生成 3 个月的免费证书， 更多请查看 acme.sh wiki\n 安装 acme.sh 1 2 3  curl https://get.acme.sh | sh # 设置alias 用的普通账户 alias acme.sh=~/.acme.sh/acme.sh   生成证书 dnsapi 导出 1 2  export CF_Key=\u0026#34;sdfsdfsdfljlbjkljlkjsdfoiwje\u0026#34; export CF_Email=\u0026#34;xxxx@sss.com\u0026#34;   ok, let\u0026rsquo;s issue a cert now:\n1 2 3 4  acme.sh --issue --dns dns_cf -d example.com -d www.example.com # 如果申请泛域名： # acme.sh --issue -d example.com -d \u0026#39;*.example.com\u0026#39; --dns dns_cf   注意  上述操作是以域名托管在 CloudFlare DNS 为例子 CloudFlare API keys 更多请参考: https://github.com/Neilpang/acme.sh/wiki/dnsapi\n\nThe CF_Key and CF_Email will be saved in ~/.acme.sh/account.conf and will be reused when needed.\n证书使用 nginx 使用  ssl_dhparam 生成  1 2  sudo mkdir /etc/nginx/ssl sudo openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048    ssl_certificate 和 ssl_trusted_certificate 字段要使用fullchain.cer  之后 nginx reload 即可，可以通过浏览器查看最新证书\n更新 acme.sh  目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步.\n 升级 acme.sh 到最新版：\n1  acme.sh --upgrade   自动更新：\n1  acme.sh --upgrade --auto-upgrade   取消自动更新：\n1  acme.sh --upgrade --auto-upgrade 0  ","date":1557100800,"permalink":"https://blog.cankiss.ml/post/breakwall/letsencrypt/","tags":["Linux"],"title":"acme.sh 生成let's encrypt免费证书"}]